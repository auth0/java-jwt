
buildscript {
    version = "3.19.2"
}

plugins {
    id 'java'
    id 'jacoco'
    id 'com.auth0.gradle.oss-library.java'
}

def signingKey = findProperty('signingKey')
def signingKeyPwd = findProperty('signingPassword')

signing {
    useInMemoryPgpKeys(signingKey, signingKeyPwd)
}

logger.lifecycle("Using version ${version} for ${group}.${name}")

oss {
    name "java jwt"
    repository "java-jwt"
    organization "auth0"
    description "Java implementation of JSON Web Token (JWT)"
    baselineCompareVersion "3.18.2"
    skipAssertSigningConfiguration true

    developers {
        auth0 {
            displayName = "Auth0"
            email = "oss@auth0.com"
        }
        lbalmaceda {
            displayName = "Luciano Balmaceda"
            email = "luciano.balmaceda@auth0.com"
        }
        hzalaz {
            displayName = "Hernan Zalazar"
            email = "hernan@auth0.com"
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

compileJava {
    exclude 'module-info.java'
    // Required to be compatible with JDK 8+
    options.compilerArgs = ['--release', "8"]
}

javadoc {
    // Exclude internal implementation package from javadoc
    excludes = ['com/auth0/jwt/impl', 'module-info.java']
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
    testImplementation 'org.bouncycastle:bcprov-jdk15on:1.60'
    testImplementation 'junit:junit:4.12'
    testImplementation 'net.jodah:concurrentunit:0.4.3'
    testImplementation 'org.hamcrest:java-hamcrest:2.0.0.0'
    testImplementation 'org.mockito:mockito-core:2.18.3'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

test {
    testLogging {
        events "skipped", "failed", "standardError"
        exceptionFormat "short"
    }
}

task compileModuleInfoJava(type: JavaCompile) {
    classpath = files()
    source = 'src/main/java/module-info.java'
    destinationDir = compileJava.destinationDir
    doLast {
        def descriptor = new File(compileJava.destinationDir, 'module-info.class')
        def dest = new File(compileJava.destinationDir, 'META-INF/versions/9')
        ant.move file: descriptor, todir: dest
    }

    doFirst {
        options.compilerArgs = [
                '--release', '9',
                '--module-path', compileJava.classpath.asPath
        ]
    }
}

jar {
    manifest.attributes('Multi-Release': 'true')
}

compileModuleInfoJava.dependsOn compileJava
classes.dependsOn compileModuleInfoJava

// Creates a version.txt file containing the current version of the SDK.
// This file is picked up and parsed by our Ship Orb to determine the version.
task exportVersion()  {
    doLast {
        new File(rootDir, "version.txt").text = "$version"
    }
}
